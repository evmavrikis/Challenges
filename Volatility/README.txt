- The challenge toy system is called Volatility. It comprises four projects (WPF app, WCF service, contracts lib, test)  and a supportive data generation tool.
- WCF service  is hosted in a console application. It is uses NetNamedPipe binding. The uri and end point can be configured in the application config file.
- The service  parses customer records from the Customers.json file and caches them in memory. There is a configurable timer for updating the physical file.
- The WCF  service interface allows for CRUD operations. It can return a  list for customers (limited fields), details for a single customer. It also provides individual record update and delete.
- The WCF service facilitates client subscription to notification events via callbacks.  It contains a  session manager responsible for broadcasting notifications and session clean-up.
- The server console application launches a console window that  remains open and displays logging. Console keeps the application running, there is no loop in the Main. If the console closes, the server dies.
- Only a single instance of the server can be launched.
- The WPF client has a main window with a grid and a second window for the customer details. The latter is used for adding a new customer or viewing/editing an existing one.
- The customer details window offers basic validation (non empty) on first name, last name and contact number.
- There is a menu for all CRUD actions plus exit. All actions (New, Edit, Delete, Refresh) have short keys support (Ctrl + first letter of  the menu item header).
- There is an additional Refresh button above the grid. The Delete key also works on the grid and has been integrated to the application functionality. There is no warning before the delete, I should  probably add one.
- The data gird is set to  single row selection, so all operations are performed on the selected customer record.
- Double clicking on a grid row opens the record details.
- There are also filters for the first and last names above the grid.
- All three CUD operations trigger a grid refresh.
- The client receives notifications from the server about failures and data changes made by other clients. 
- There is a status label at the bottom with a tool-tip explaining the content. It displays the number of grid, number of record changes on the server (since latest refresh) and number of server errors.
- The WPF app has an internal mock implementation for the WCF service. This is the reason the client code is thread safe, although I believe the WCF implementation is thread safe anyway. (see comments in the code, we can also discuss it)
- Unfortunately, I have not been able to cover the service with automated  tests. I have only created a low level load test wwith 500 clients firing lots of semi-random requests. Will try to add a few more if I time permits it.
- There is a Run folder with all the binaries ready for execution. It also contains a brief file with instructions.
